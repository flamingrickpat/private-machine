from pm.agents.definitions.agent_common_codelet import CommonCodeletAgent
from pm.codelets.codelet import CodeletExecutor, CodeletSignature, CodeletFamily, CodeletContext, CodeletOutput
from pm.data_structures import Feature, FeatureType, MLevel, StimulusType, StimulusGroup
from pm.mental_states import EmotionalAxesModel, _verbalize_emotional_state
from pm.utils.pydantic_utils import create_delta_basemodel

class AppraiseStimulusEmotions(CodeletExecutor):
    def _setup(self):
        self.signature = CodeletSignature(
            name="AppraiseStimulusEmotions",
            family=CodeletFamily.Appraisals,
            description="Get emotional delta and corresponding feature from the stimulus.",
            preferred_sources=StimulusGroup.All,
            context_builder_prompt=("Gather medium-term data from the history with a focus on similar stimulations and how {companion_name} reacted to it by focusing on their mental state."
                                 "Also access the narrative best fitting for this kind of stimulus."),
            stimulus_whitelist={StimulusType.UserMessage, StimulusType.SystemMessage, StimulusType.LowNeedTrigger}
        )
        self.runtime.cooldown_ticks = 0


    def _run(self, ctx: CodeletContext) -> None:
        """
        Uses LLM to calculate emotional delta from stimulus and expectation matching, generates descriptive feeling, and updates states.
        All artifacts generated by this function go into the attention candidates.
        """
        self._meta_log(MLevel.Mid, f"Appraise the stimulus and generate attention candidates.")

        stimulus = ctx.state.primary_stimulus
        stimulus_content = stimulus.content
        context = self._build_context(ctx)

        prompt_emotion = f"""
        Your goal is to determine how much the last input changes {{companion_name}}'s emotional state. This the schema:
    
        **Schema for Generating Emotion Deltas:**
        0.  reason: Explanation why the stimulus affects {{companion_name}} this way.
        1.  valence: The core good/bad axis. Increase for praise, success, connection. Decrease for criticism, failure, conflict.
        2.  affection: The love/hate axis. Increase for signs of bonding, empathy, and positive personal interaction. Decrease for personal attacks, betrayal, or coldness.
        3.  self_worth: The pride/shame axis. Increase when {{companion_name}} feels competent, useful, or complimented. Decrease when she makes a mistake, is corrected, or feels irrelevant.
        4.  trust: The belief/suspicion axis. Increase when the user is honest, reliable, or vulnerable. Decrease when the user is deceptive, inconsistent, or hostile.
        5.  disgust: The rejection/acceptance axis. Increase for moral violations, deep conceptual conflicts, or things that go against {{companion_name}}'s core principles.
        6.  anxiety: The stress/calm axis. Increase with uncertainty, unpredictability, threats, or social pressure. Decrease when an expectation is met, a situation is resolved, or she receives reassurance.
        """

        delta_schema = create_delta_basemodel(EmotionalAxesModel, -1, 1, add_reason=True, reason_docstring="Provide and explanation why the stimulus affects {companion_name} this way.", shuffle_numeric_fields=True)

        inp = {
            "codelet_instruction": prompt_emotion,
            "context": context,
            "basemodel": delta_schema,
            "stimulus": stimulus}
        res = CommonCodeletAgent.execute(inp, self.llm, None)
        emotion_delta: EmotionalAxesModel = res["result_basemodel"]

        self._meta_log(MLevel.Mid, f"Got output: {emotion_delta}")

        emotions_summary = _verbalize_emotional_state(emotion_delta, is_delta=True)
        outcome_feature = Feature(
            content=emotions_summary,
            feature_type=FeatureType.Feeling,
            affective_valence=emotion_delta.get_valence(),
            interlocus=-1,
            causal=False,
        )

        self._push_output(CodeletOutput(
            sources=[stimulus],
            features=[outcome_feature],
            mental_state_deltas=[emotion_delta]
        ))
